require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do
  include Devise::TestHelpers

  before :all do
    Customer.destroy_all
    User.destroy_all
  end

  let(:customer) { FactoryGirl.create(:customer) }
  let(:valid_attributes) { { "name" => "MyText", "email" => "email@email.com", "password" => "password" , "customer_id" => customer.id} }


  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  before :each do
    User.destroy_all
    xuser = FactoryGirl.create(:user)
    sign_in xuser
  end

  describe "GET index" do
    it "assigns all Users as @Users" do
      User.destroy_all
      user = FactoryGirl.build(:reg_user)
      user.customer = customer
      user.save!
      sign_in user
      get :index, {}, valid_session
      assigns(:users).should eq([user])
      User.destroy_all
    end
  end

  describe "GET new" do
    it "assigns a new user as @user" do
      get :new, {}, valid_session
      assigns(:user).should be_a_new(User)
      User.destroy_all
    end
  end

  describe "GET edit" do
    it "assigns the requested user as @user" do
      user = User.create! valid_attributes
      get :edit, {:id => user.to_param}, valid_session
      assigns(:user).should eq(user)
      User.destroy_all
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new User" do
        expect {
          post :create, {:user => valid_attributes}, valid_session
        }.to change(User, :count).by(1)
        User.destroy_all
      end

      it "creates a new User" do
        User.destroy_all
        user = FactoryGirl.build(:reg_user)
        user.customer = customer
        user.master_user = true
        user.save
        sign_in user
        expect {
          post :create, {:user => valid_attributes}, valid_session
        }.to change(User, :count).by(1)
        User.destroy_all
      end

      it "doesn't create a new User" do
        User.destroy_all
        user = FactoryGirl.build(:reg_user)
        user.customer = customer
        user.save
        sign_in user
        expect {
          post :create, {:user => valid_attributes}, valid_session
        }.to change(User, :count).by(0)
        User.destroy_all
      end

      it "assigns a newly created user as @user" do
        post :create, {:user => valid_attributes}, valid_session
        assigns(:user).should be_a(User)
        assigns(:user).should be_persisted
        User.destroy_all
      end

      it "redirects to the users" do
        post :create, {:user => valid_attributes}, valid_session
        response.should redirect_to(users_path)
        User.destroy_all
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved user as @user" do
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        post :create, {:user => { "name" => "invalid value" }}, valid_session
        assigns(:user).should be_a_new(User)
        User.destroy_all
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        post :create, {:user => { "name" => "invalid value" }}, valid_session
        response.should render_template("new")
        User.destroy_all
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested user" do
        user = User.create! valid_attributes
        # Assuming there are no other Users in the database, this
        # specifies that the User created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        User.any_instance.should_receive(:update).with({ "name" => "MyText" })
        put :update, {:id => user.to_param, :user => { "name" => "MyText" }}, valid_session
        User.destroy_all
      end

      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => valid_attributes}, valid_session
        assigns(:user).should eq(user)
        User.destroy_all
      end

      it "redirects to the user" do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => valid_attributes}, valid_session
        response.should redirect_to users_path
        User.destroy_all
      end
    end

    describe "with invalid params" do
      it "assigns the user as @user" do
        user = User.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        put :update, {:id => user.to_param, :user => { "name" => "invalid value" }}, valid_session
        assigns(:user).should eq(user)
        User.destroy_all
      end

      it "re-renders the 'edit' template" do
        user = User.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        put :update, {:id => user.to_param, :user => { "name" => "invalid value" }}, valid_session
        response.should render_template("edit")
        User.destroy_all
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested user" do
      user = User.create! valid_attributes
      expect {
        delete :destroy, {:id => user.to_param}, valid_session
      }.to change(User, :count).by(-1)
      User.destroy_all
    end

    it "redirects to the Users list" do
      user = User.create! valid_attributes
      delete :destroy, {:id => user.to_param}, valid_session
      response.should redirect_to(users_path)
      User.destroy_all
    end
  end

end
